// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eRestoran.Database;

namespace eRestoran.Database.Migrations
{
    [DbContext(typeof(eRestoranContext))]
    partial class eRestoranContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("eRestoran.Domain.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Gradovi");
                });

            modelBuilder.Entity("eRestoran.Domain.Jelo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<bool>("Favorit")
                        .HasColumnType("bit");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KategorijaID");

                    b.ToTable("Jela");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Cijena = 6.0,
                            Favorit = true,
                            KategorijaID = 1,
                            Naziv = "Pizza Margherita",
                            Opis = "Paradajz sos, origano i sir",
                            Slika = "Images\\jela\\margherita.jpg"
                        },
                        new
                        {
                            ID = 2,
                            Cijena = 7.0,
                            Favorit = false,
                            KategorijaID = 1,
                            Naziv = "Pizza Funghi",
                            Opis = "Paradajz sos, origano, sir i gljive",
                            Slika = "Images\\jela\\funghi.jpg"
                        },
                        new
                        {
                            ID = 3,
                            Cijena = 8.0,
                            Favorit = false,
                            KategorijaID = 1,
                            Naziv = "Pizza Vegeteriana",
                            Opis = "Paradajz sos, svježi paradajz, paprika, origano, sir, tikvice, gljive",
                            Slika = "images\\jela\\vegeteriana.jpg"
                        },
                        new
                        {
                            ID = 4,
                            Cijena = 4.0,
                            Favorit = false,
                            KategorijaID = 2,
                            Naziv = "Krem supa od paradajza",
                            Opis = "Svježe pripremana krem supa od paradajza sa mozzarelom i rižom",
                            Slika = "images\\jela\\supa_paradajz.jpg"
                        },
                        new
                        {
                            ID = 5,
                            Cijena = 5.0,
                            Favorit = true,
                            KategorijaID = 2,
                            Naziv = "Krem supa od tikve",
                            Opis = "Svježe pripremana krem supa od tikve",
                            Slika = "images\\jela\\supa_tikva.jpg"
                        },
                        new
                        {
                            ID = 6,
                            Cijena = 25.0,
                            Favorit = true,
                            KategorijaID = 3,
                            Naziv = "Losos verdura sa žara",
                            Opis = "File lososa, tikvice, krompir, paprika, patlidžan, maslinovo ulje",
                            Slika = "images\\jela\\losos_zar.jpg"
                        },
                        new
                        {
                            ID = 7,
                            Cijena = 25.0,
                            Favorit = false,
                            KategorijaID = 3,
                            Naziv = "Losos sa žara sa špinatom",
                            Opis = "File lososa, tikvice, krompir, špinat, paprika, patlidžan",
                            Slika = "images\\jela\\losos_zar_spinat.jpg"
                        },
                        new
                        {
                            ID = 8,
                            Cijena = 8.0,
                            Favorit = false,
                            KategorijaID = 4,
                            Naziv = "Pileća salata",
                            Opis = "Pileći file, paradajz, rotkvica, rukola, zelena salata, krastavac, pecivo",
                            Slika = "images\\jela\\pileća_salata.jpg"
                        },
                        new
                        {
                            ID = 9,
                            Cijena = 8.0,
                            Favorit = false,
                            KategorijaID = 4,
                            Naziv = "Tuna salata",
                            Opis = "Komadići tune, paradajz, rotkvica, rukola, zelena salata, krastavac, maslinovo ulje, aceto balsamico, pecivo",
                            Slika = "images\\jela\\tuna_salata.jpg"
                        },
                        new
                        {
                            ID = 13,
                            Cijena = 8.0,
                            Favorit = false,
                            KategorijaID = 4,
                            Naziv = "Mozzarella salata",
                            Opis = "Mozzarela, paradajz, rotkvica, rukola, zelena salata, masline, aceto balsamico, pecivo. ",
                            Slika = "images\\jela\\mozzarella_salata.jpg"
                        },
                        new
                        {
                            ID = 14,
                            Cijena = 8.0,
                            Favorit = false,
                            KategorijaID = 1,
                            Naziv = "Pizza Tonno",
                            Opis = "Paradajz sos, origano, sir, luk, tunjevina, crne masline. ",
                            Slika = "images\\jela\\tonno.jpg"
                        },
                        new
                        {
                            ID = 10,
                            Cijena = 2.5,
                            Favorit = false,
                            KategorijaID = 5,
                            Naziv = "Macchiato",
                            Opis = "Kombinacija toplog mlijeka, pjene od mlijeka i espresso kafe",
                            Slika = "images\\jela\\macchiato.jpg"
                        },
                        new
                        {
                            ID = 11,
                            Cijena = 3.0,
                            Favorit = false,
                            KategorijaID = 5,
                            Naziv = "Coca Cola",
                            Opis = "Classic ili Zero, opcionalno poslužena sa ledom i limunom",
                            Slika = "images\\jela\\coca_cola.jpg"
                        },
                        new
                        {
                            ID = 12,
                            Cijena = 3.0,
                            Favorit = false,
                            KategorijaID = 5,
                            Naziv = "Prirodni sokovi",
                            Opis = "Prirodno cijeđeni sokovi sa okusima naranče, jagode, višnje, jabuke, breskve, ananasa...",
                            Slika = "images\\jela\\prirodni_sokovi.jpg"
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.Kategorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kategorije");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Pizza",
                            Opis = "Različite vrste pizza spremljene sa pažljivo odabranim i kvalitetnim namirnicama, pečene na tradicionalan način"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Supe",
                            Opis = "Supe od svježeg povrća, idealne su kao predjelo"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Ribe",
                            Opis = "Bogat izvor vitamina, minerala, bjelančevina, kao i omega 3 masnih kiselina"
                        },
                        new
                        {
                            ID = 4,
                            Naziv = "Salate",
                            Opis = "Napravljene od svježih sastojaka, super zdrave i idealan obrok za svaki dio dana"
                        },
                        new
                        {
                            ID = 5,
                            Naziv = "Pića",
                            Opis = "Razne vrste gaziranih i negaziranih pića, kao i toplih napitaka"
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GradID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01f95c66-bfc5-4152-8cdd-34b7bb72c4da",
                            Email = "admin@restoran.com",
                            EmailConfirmed = false,
                            Ime = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RESTORAN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBccacVlcWqW5XCtSQ0H1/ekuR0j5wn+eazbhmcDRYhnhCxGl8oNe1y/d9xGGd3xxw==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Admin",
                            SecurityStamp = "59454710-9d4e-454b-b8eb-54d50b292a62",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eb443ff-e768-4a78-aa27-a7cf94afe13a",
                            Email = "uposlenik@restoran.com",
                            EmailConfirmed = false,
                            Ime = "Uposlenik",
                            LockoutEnabled = false,
                            NormalizedEmail = "UPOSLENIK@RESTORAN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKC4ICj4yWv1C5LXItZ0AnMJS7Uca87UAj+hfUvsTX4XU/cvDQiHqhFNXRnDE124Bw==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Uposlenik",
                            SecurityStamp = "40c929e8-2d1e-432b-9bfb-9cb7c576db97",
                            TwoFactorEnabled = false,
                            UserName = "Uposlenik"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a64314f5-959e-40c3-86ac-268ff395eb24",
                            Email = "korisnik@restoran.com",
                            EmailConfirmed = false,
                            Ime = "Korisnik",
                            LockoutEnabled = false,
                            NormalizedEmail = "KORISNIK@RESTORAN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1rjx97Nm8gJof/WpSfZkzDZF30QmwFVtqdgY/MbaoJWK7xtyu2eW1AVPGwJugjMA==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Korisnik",
                            SecurityStamp = "4e0259c9-feca-49e0-a21c-b32a72e89a95",
                            TwoFactorEnabled = false,
                            UserName = "Korisnik"
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikNamirnica", b =>
                {
                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("NamirnicaID")
                        .HasColumnType("int");

                    b.HasKey("KorisnikID", "NamirnicaID");

                    b.HasIndex("NamirnicaID");

                    b.ToTable("KorisnikNamirnice");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("KorisnikId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikUloga", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.KorpaStavka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("JeloID")
                        .HasColumnType("int");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<string>("KorpaID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("JeloID");

                    b.ToTable("KorpaStavke");
                });

            modelBuilder.Entity("eRestoran.Domain.Like", b =>
                {
                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("JeloID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.HasKey("KorisnikID", "JeloID");

                    b.HasIndex("JeloID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("eRestoran.Domain.NacinPlacanja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrojKartice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NaciniPlacanja");
                });

            modelBuilder.Entity("eRestoran.Domain.Namirnica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("CijenaPoKomadu")
                        .HasColumnType("float");

                    b.Property<string>("JedinicaMjere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Namirnice");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CijenaPoKomadu = 0.90000000000000002,
                            JedinicaMjere = "kilogram",
                            Kolicina = 20,
                            Naziv = "Ulje"
                        },
                        new
                        {
                            ID = 2,
                            CijenaPoKomadu = 1.0,
                            JedinicaMjere = "kilogram",
                            Kolicina = 100,
                            Naziv = "Brašno"
                        },
                        new
                        {
                            ID = 3,
                            CijenaPoKomadu = 0.90000000000000002,
                            JedinicaMjere = "kilogram",
                            Kolicina = 20,
                            Naziv = "So"
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.Narudzba", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int?>("NacinPlacanjaID")
                        .HasColumnType("int");

                    b.Property<int>("StatusDostaveID")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int?>("UposlenikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("NacinPlacanjaID");

                    b.HasIndex("StatusDostaveID");

                    b.HasIndex("UposlenikID");

                    b.ToTable("Narudzbe");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Adresa = "Adresa 1",
                            DatumNarudzbe = new DateTime(2021, 1, 13, 7, 47, 14, 87, DateTimeKind.Local).AddTicks(5039),
                            KorisnikID = 3,
                            StatusDostaveID = 1,
                            Telefon = "0601111111",
                            UposlenikID = 2
                        },
                        new
                        {
                            ID = 2,
                            Adresa = "Adresa 2",
                            DatumNarudzbe = new DateTime(2021, 1, 13, 7, 47, 14, 89, DateTimeKind.Local).AddTicks(7026),
                            KorisnikID = 3,
                            StatusDostaveID = 2,
                            Telefon = "0602222222",
                            UposlenikID = 2
                        },
                        new
                        {
                            ID = 3,
                            Adresa = "Adresa 3",
                            DatumNarudzbe = new DateTime(2021, 1, 13, 7, 47, 14, 89, DateTimeKind.Local).AddTicks(7074),
                            KorisnikID = 3,
                            StatusDostaveID = 3,
                            Telefon = "0603333333",
                            UposlenikID = 2
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.NarudzbaDetalji", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<int>("JeloID")
                        .HasColumnType("int");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("JeloID");

                    b.HasIndex("NarudzbaID");

                    b.ToTable("NarudzbaDetalji");
                });

            modelBuilder.Entity("eRestoran.Domain.RefreshToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("eRestoran.Domain.Rezervacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BrojMjesta")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumVrijemeEvidencije")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumVrijemeRezervacije")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UposlenikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("UposlenikID");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("eRestoran.Domain.StatusDostave", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("StatusiDostave");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Status = "Narudžba prihvaćena"
                        },
                        new
                        {
                            ID = 2,
                            Status = "Narudžba odbijena"
                        },
                        new
                        {
                            ID = 3,
                            Status = "Narudžba u obradi"
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ccd5cddc-0a4a-4258-810e-5ae8442c717c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "db842a85-6ae8-482a-beb9-3e5271973189",
                            Name = "Uposlenik",
                            NormalizedName = "UPOSLENIK"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "6bd97c65-2284-4855-8a33-747e7a86c03e",
                            Name = "Korisnik",
                            NormalizedName = "KORISNIK"
                        });
                });

            modelBuilder.Entity("eRestoran.Domain.UlogaClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UlogaId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("eRestoran.Domain.Jelo", b =>
                {
                    b.HasOne("eRestoran.Domain.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("eRestoran.Domain.Korisnik", b =>
                {
                    b.HasOne("eRestoran.Domain.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikClaim", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId");

                    b.HasOne("eRestoran.Domain.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikLogin", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId");

                    b.HasOne("eRestoran.Domain.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikNamirnica", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Namirnica", "Namirnica")
                        .WithMany()
                        .HasForeignKey("NamirnicaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Namirnica");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikToken", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId");

                    b.HasOne("eRestoran.Domain.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eRestoran.Domain.KorisnikUloga", b =>
                {
                    b.HasOne("eRestoran.Domain.Uloga", "Uloga")
                        .WithMany("KorisnikUloge")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany("KorisnikUloge")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eRestoran.Domain.KorpaStavka", b =>
                {
                    b.HasOne("eRestoran.Domain.Jelo", "Jelo")
                        .WithMany()
                        .HasForeignKey("JeloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jelo");
                });

            modelBuilder.Entity("eRestoran.Domain.Like", b =>
                {
                    b.HasOne("eRestoran.Domain.Jelo", "Jelo")
                        .WithMany()
                        .HasForeignKey("JeloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jelo");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eRestoran.Domain.Narudzba", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.NacinPlacanja", "NacinPlacanja")
                        .WithMany()
                        .HasForeignKey("NacinPlacanjaID");

                    b.HasOne("eRestoran.Domain.StatusDostave", "StatusDostave")
                        .WithMany()
                        .HasForeignKey("StatusDostaveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Korisnik", "Uposlenik")
                        .WithMany()
                        .HasForeignKey("UposlenikID");

                    b.Navigation("Korisnik");

                    b.Navigation("NacinPlacanja");

                    b.Navigation("StatusDostave");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("eRestoran.Domain.NarudzbaDetalji", b =>
                {
                    b.HasOne("eRestoran.Domain.Jelo", "Jelo")
                        .WithMany()
                        .HasForeignKey("JeloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Narudzba", "Narudzba")
                        .WithMany()
                        .HasForeignKey("NarudzbaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jelo");

                    b.Navigation("Narudzba");
                });

            modelBuilder.Entity("eRestoran.Domain.RefreshToken", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eRestoran.Domain.Rezervacija", b =>
                {
                    b.HasOne("eRestoran.Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Korisnik", "Uposlenik")
                        .WithMany()
                        .HasForeignKey("UposlenikID");

                    b.Navigation("Korisnik");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("eRestoran.Domain.UlogaClaim", b =>
                {
                    b.HasOne("eRestoran.Domain.Uloga", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRestoran.Domain.Uloga", "Uloga")
                        .WithMany("UlogaClaims")
                        .HasForeignKey("UlogaId");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eRestoran.Domain.Korisnik", b =>
                {
                    b.Navigation("KorisnikUloge");
                });

            modelBuilder.Entity("eRestoran.Domain.Uloga", b =>
                {
                    b.Navigation("KorisnikUloge");

                    b.Navigation("UlogaClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
